package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/regulatory-transparency-monitor/graph-builder/graph/generated"
	"github.com/regulatory-transparency-monitor/graph-builder/graph/model"
)

// GetMetadata is the resolver for the getMetadata field.
func (r *queryResolver) GetMetadata(ctx context.Context, version string) (*model.Metadata, error) {
	panic(fmt.Errorf("not implemented: GetMetadata - getMetadata"))
}

// GetProject is the resolver for the getProject field.
func (r *queryResolver) GetProject(ctx context.Context, uuid string) (*model.Project, error) {
	panic(fmt.Errorf("not implemented: GetProject - getProject"))
}

// GetInstance is the resolver for the getInstance field.
func (r *queryResolver) GetInstance(ctx context.Context, id string) (*model.Instance, error) {
	panic(fmt.Errorf("not implemented: GetInstance - getInstance"))
}

// GetVolume is the resolver for the getVolume field.
func (r *queryResolver) GetVolume(ctx context.Context, id string) (*model.Volume, error) {
	panic(fmt.Errorf("not implemented: GetVolume - getVolume"))
}

// GetPhysicalHost is the resolver for the getPhysicalHost field.
func (r *queryResolver) GetPhysicalHost(ctx context.Context, id string) (*model.PhysicalHost, error) {
	panic(fmt.Errorf("not implemented: GetPhysicalHost - getPhysicalHost"))
}

// GetClusterNode is the resolver for the getClusterNode field.
func (r *queryResolver) GetClusterNode(ctx context.Context, id string) (*model.ClusterNode, error) {
	panic(fmt.Errorf("not implemented: GetClusterNode - getClusterNode"))
}

// GetPod is the resolver for the getPod field.
func (r *queryResolver) GetPod(ctx context.Context, id string) (*model.Pod, error) {
	panic(fmt.Errorf("not implemented: GetPod - getPod"))
}

// GetPersistentVolume is the resolver for the getPersistentVolume field.
func (r *queryResolver) GetPersistentVolume(ctx context.Context, id string) (*model.PersistentVolume, error) {
	panic(fmt.Errorf("not implemented: GetPersistentVolume - getPersistentVolume"))
}

// GetPersistentVolumeClaim is the resolver for the getPersistentVolumeClaim field.
func (r *queryResolver) GetPersistentVolumeClaim(ctx context.Context, id string) (*model.PersistentVolumeClaim, error) {
	panic(fmt.Errorf("not implemented: GetPersistentVolumeClaim - getPersistentVolumeClaim"))
}

// GetPDIndicator is the resolver for the getPDIndicator field.
func (r *queryResolver) GetPDIndicator(ctx context.Context, id string) (*model.PDIndicator, error) {
	panic(fmt.Errorf("not implemented: GetPDIndicator - getPDIndicator"))
}

// GetDataCategory is the resolver for the getDataCategory field.
func (r *queryResolver) GetDataCategory(ctx context.Context, name string) (*model.DataCategory, error) {
	panic(fmt.Errorf("not implemented: GetDataCategory - getDataCategory"))
}

// GetPdsWithCategory is the resolver for the getPdsWithCategory field.
func (r *queryResolver) GetPdsWithCategory(ctx context.Context, version string, categoryName string) ([]*model.Pod, error) {
	return r.Service.GetPdsWithCategory(ctx, version, categoryName)
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
